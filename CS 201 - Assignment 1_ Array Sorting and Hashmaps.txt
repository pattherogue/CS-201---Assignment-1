Part 1: Sorting Arrays
import java.util.Scanner;


/**
* This class implements a program that quizzes the user on U.S. state capitals.
* It stores the states and their capitals in a two-dimensional array, displays the
* current contents of the array, sorts the content by capital using bubble sort,
* prompts the user to enter answers for all state capitals, and displays the total
* correct count. The user's answers are not case-sensitive.
*/


public class SortingArrays {
   /**
    * The main method of the program.
    * @param args The command-line arguments (not used in this program).
    */
   public static void main(String[] args) {
       // Define the array of state capitals
       String[][] stateCapitals = {
           {"Alabama", "Montgomery"},
           {"Alaska", "Juneau"},
           {"Arizona", "Phoenix"},
           {"Arkansas", "Little Rock"},
           {"California", "Sacramento"},
           {"Colorado", "Denver"},
           {"Connecticut", "Hartford"},
           {"Delaware", "Dover"},
           {"Florida", "Tallahassee"},
           {"Georgia", "Atlanta"},
           {"Hawaii", "Honolulu"},
           {"Idaho", "Boise"},
           {"Illinois", "Springfield"},
           {"Indiana", "Indianapolis"},
           {"Iowa", "Des Moines"},
           {"Kansas", "Topeka"},
           {"Kentucky", "Frankfort"},
           {"Louisiana", "Baton Rouge"},
           {"Maine", "Augusta"},
           {"Maryland", "Annapolis"},
           {"Massachusetts", "Boston"},
           {"Michigan", "Lansing"},
           {"Minnesota", "St. Paul"},
           {"Mississippi", "Jackson"},
           {"Missouri", "Jefferson City"},
           {"Montana", "Helena"},
           {"Nebraska", "Lincoln"},
           {"Nevada", "Carson City"},
           {"New Hampshire", "Concord"},
           {"New Jersey", "Trenton"},
           {"New Mexico", "Santa Fe"},
           {"New York", "Albany"},
           {"North Carolina", "Raleigh"},
           {"North Dakota", "Bismarck"},
           {"Ohio", "Columbus"},
           {"Oklahoma", "Oklahoma City"},
           {"Oregon", "Salem"},
           {"Pennsylvania", "Harrisburg"},
           {"Rhode Island", "Providence"},
           {"South Carolina", "Columbia"},
           {"South Dakota", "Pierre"},
           {"Tennessee", "Nashville"},
           {"Texas", "Austin"},
           {"Utah", "Salt Lake City"},
           {"Vermont", "Montpelier"},
           {"Virginia", "Richmond"},
           {"Washington", "Olympia"},
           {"West Virginia", "Charleston"},
           {"Wisconsin", "Madison"},
           {"Wyoming", "Cheyenne"}
       };


       // Display the current contents of the array
       System.out.println("Current contents of the array:");
       // Iterate over each state-capital pair in the stateCapitals array
       for (String[] state : stateCapitals) {
            // Print the state name followed by a hyphen and the capital
           System.out.println(state[0] + " - " + state[1]);
       }


       // Sort the array by capital using bubble sort
       bubbleSortByCapital(stateCapitals);


       // Prompt the user to enter answers for all state capitals
       Scanner scanner = new Scanner(System.in); // Create a new Scanner object for user input
       int correctCount = 0; // Initialize a variable to keep track of the number of correct answers
       // Loop through each state in the stateCapitals array
       for (String[] state : stateCapitals) {
           // Display a prompt asking the user to enter the capital of the current state
           System.out.print("Enter the capital of " + state[0] + ": ");
           // Read the user's input for the capital of the current state
           String userCapital = scanner.nextLine();
           // Check if the user's input matches the capital of the current state (case-insensitive)
           if (userCapital.equalsIgnoreCase(state[1])) {
               correctCount++; // Increment the correctCount if the answer is correct
           }
       }


       // Display the total correct count
       System.out.println("Total correct count: " + correctCount);
   }


   /**
    * Sorts the 2D array by the second element of each sub-array (the capital) using bubble sort.
    * @param array The 2D array to be sorted.
    */


   private static void bubbleSortByCapital(String[][] array) {
       boolean swapped; // Flag to indicate if any elements were swapped in the current iteration
       // Continue looping until no more swaps are made
       do {
           swapped = false; // Assume no elements will be swapped in this iteration
           // Iterate through the array
           for (int i = 0; i < array.length - 1; i++) {
               // Compare two capitals and swap if necessary
               if (array[i][1].compareToIgnoreCase(array[i + 1][1]) > 0) {
                   String[] temp = array[i]; // Temporary variable to hold the current state and capital
                   array[i] = array[i + 1]; // Swap the current state and capital with the next state and capital
                   array[i + 1] = temp; // Set the next state and capital to the temporary variable
                   swapped = true; // Set swapped to true to indicate that a swap occurred
               }
           }
       } while (swapped); // Repeat the loop if a swap was made in this iteration
   }
  
}








Part 2: Sorting & Searching HashMap
import java.util.HashMap;
import java.util.Scanner;
import java.util.TreeMap;


/**
* This program demonstrates sorting and searching a HashMap of U.S. state capitals.
* It initializes a HashMap with the state-capital pairs, displays the contents of the HashMap,
* sorts the HashMap by state name using a TreeMap, prompts the user to enter a state,
* and displays the capital of the entered state if it exists in the sorted map.
*/


public class SortingSearchingHashMap {
   public static void main(String[] args) {
       // Define and populate the HashMap of state capitals
       HashMap<String, String> stateCapitalsMap = new HashMap<>();
       stateCapitalsMap.put("Alabama", "Montgomery");
       stateCapitalsMap.put("Alaska", "Juneau");
       stateCapitalsMap.put("Arizona", "Phoenix");
       stateCapitalsMap.put("Arkansas", "Little Rock");
       stateCapitalsMap.put("California", "Sacramento");
       stateCapitalsMap.put("Colorado", "Denver");
       stateCapitalsMap.put("Connecticut", "Hartford");
       stateCapitalsMap.put("Delaware", "Dover");
       stateCapitalsMap.put("Florida", "Tallahassee");
       stateCapitalsMap.put("Georgia", "Atlanta");
       stateCapitalsMap.put("Hawaii", "Honolulu");
       stateCapitalsMap.put("Idaho", "Boise");
       stateCapitalsMap.put("Illinois", "Springfield");
       stateCapitalsMap.put("Indiana", "Indianapolis");
       stateCapitalsMap.put("Iowa", "Des Moines");
       stateCapitalsMap.put("Kansas", "Topeka");
       stateCapitalsMap.put("Kentucky", "Frankfort");
       stateCapitalsMap.put("Louisiana", "Baton Rouge");
       stateCapitalsMap.put("Maine", "Augusta");
       stateCapitalsMap.put("Maryland", "Annapolis");
       stateCapitalsMap.put("Massachusetts", "Boston");
       stateCapitalsMap.put("Michigan", "Lansing");
       stateCapitalsMap.put("Minnesota", "St. Paul");
       stateCapitalsMap.put("Mississippi", "Jackson");
       stateCapitalsMap.put("Missouri", "Jefferson City");
       stateCapitalsMap.put("Montana", "Helena");
       stateCapitalsMap.put("Nebraska", "Lincoln");
       stateCapitalsMap.put("Nevada", "Carson City");
       stateCapitalsMap.put("New Hampshire", "Concord");
       stateCapitalsMap.put("New Jersey", "Trenton");
       stateCapitalsMap.put("New Mexico", "Santa Fe");
       stateCapitalsMap.put("New York", "Albany");
       stateCapitalsMap.put("North Carolina", "Raleigh");
       stateCapitalsMap.put("North Dakota", "Bismarck");
       stateCapitalsMap.put("Ohio", "Columbus");
       stateCapitalsMap.put("Oklahoma", "Oklahoma City");
       stateCapitalsMap.put("Oregon", "Salem");
       stateCapitalsMap.put("Pennsylvania", "Harrisburg");
       stateCapitalsMap.put("Rhode Island", "Providence");
       stateCapitalsMap.put("South Carolina", "Columbia");
       stateCapitalsMap.put("South Dakota", "Pierre");
       stateCapitalsMap.put("Tennessee", "Nashville");
       stateCapitalsMap.put("Texas", "Austin");
       stateCapitalsMap.put("Utah", "Salt Lake City");
       stateCapitalsMap.put("Vermont", "Montpelier");
       stateCapitalsMap.put("Virginia", "Richmond");
       stateCapitalsMap.put("Washington", "Olympia");
       stateCapitalsMap.put("West Virginia", "Charleston");
       stateCapitalsMap.put("Wisconsin", "Madison");
       stateCapitalsMap.put("Wyoming", "Cheyenne");


   // Display the content of the HashMap
   System.out.println("Content of the HashMap:");
   // Iterate over each key (state) in the HashMap
   for (String state : stateCapitalsMap.keySet()) {
       // Print the state-capital pair
       System.out.println(state + " - " + stateCapitalsMap.get(state));
   }


   // Sort the HashMap using TreeMap
   TreeMap<String, String> sortedStateCapitalsMap = new TreeMap<>(stateCapitalsMap);


   // Prompt the user to enter a state and display the capital
   Scanner scanner = new Scanner(System.in); // Create a new Scanner object to read user input
   System.out.print("Enter a state: "); // Prompt the user to enter a state
   String userState = scanner.nextLine(); // Read the user's input for the state
   String capital = sortedStateCapitalsMap.get(userState); // Retrieve the capital corresponding to the user's input state from the sorted TreeMap
   if (capital != null) { // Check if the capital is found
       System.out.println("Capital of " + userState + ": " + capital); // Display the capital corresponding to the user's input state
   } else {
       System.out.println("State not found."); // Display a message indicating that the state was not found
   }
   }
}